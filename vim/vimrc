if &compatible
  set nocompatible
endif
if &shell =~# 'fish$'   "This is a compatibility fix for fish-shell and plugins
  set shell=sh
endif

" ================ Vundle for packages ========================
filetype off

if empty(glob("~/.vim/bundle/repos/github.com/Shougo/dein.vim"))
  call system( 'mkdir -p ~/.vim/bundle/repos/github.com/Shougo/dein.vim' )
  call system( 'git clone https://github.com/Shougo/dein.vim ~/.vim/bundle/repos/github.com/Shougo/dein.vim' )
endif

set runtimepath+=~/.vim/bundle/repos/github.com/Shougo/dein.vim
call dein#begin('~/.vim/bundle')

" General plugins
call dein#add('Shougo/dein.vim')             " Package Manager
call dein#add('haya14busa/dein-command.vim') " Dein Commands

call dein#add('vim-airline/vim-airline')        " I like being on the airline
call dein#add('vim-airline/vim-airline-themes') " my theme is here

call dein#add('christoomey/vim-tmux-navigator') " Seamless vim & tmux nav with C-hjkl
call dein#add('scrooloose/nerdtree')            " NEEEEEEEERD Tree
call dein#add('Xuyuanp/nerdtree-git-plugin')    " git in my NERDTree
call dein#add('tpope/vim-surround')             " cs\" and cs' for surrounding
call dein#add('tpope/vim-obsession')            " obsessivly save sessions
call dein#add('godlygeek/tabular')              " Text Alignment plugin
call dein#add('junegunn/vim-easy-align')        " Text Alignment plugin
call dein#add('tomtom/tcomment_vim')            " Auto block commenting

"  Autocomplete?
call dein#add('Shougo/unite.vim')
call dein#add('Shougo/deoplete.nvim')
call dein#add('Shougo/neco-vim')
call dein#add('Shougo/neoinclude.vim')
call dein#add('Shougo/neco-syntax')
call dein#add('Shougo/neopairs.vim')

" Programming tools
call dein#add('tpope/vim-fugitive')     " How you use git as a vim user
call dein#add('airblade/vim-gitgutter') " Shows edits from git in gutter
call dein#add('rizzatti/dash.vim')      " Dash is amazing for lookups
call dein#add('scrooloose/syntastic')   " Global Syntax test
call dein#add('blueyed/delimitMate')    " Autoadding closing braces
call dein#add('janko-m/vim-test')

" Searching
call dein#add('mileszs/ack.vim') " Experimenting with ag, the silver searcher
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Language stuff
call dein#add('plasticboy/vim-markdown') " Markdown
call dein#add('itspriddle/vim-marked')   " Opens Marked 2 on current file
call dein#add('elixir-lang/vim-elixir')
call dein#add('awetzel/elixir.nvim')
call dein#add('keith/tmux.vim')
call dein#add('dougireton/vim-chef')     " Sets filetypes with chef and sets path to make `gf` work with recipes
call dein#add('dag/vim-fish')            " Fish is my shell

" My special plugins
call dein#add('onlyhavecans/mm.vim')

" Color Scheme
call dein#add('altercation/vim-colors-solarized')
call dein#add('baskerville/bubblegum')

call dein#end()

if dein#check_install()
  call dein#install()
endif

" ================ File types ================================
set encoding=utf-8
filetype plugin indent on
syntax enable

" ================ Color =====================================
set background=dark
colorscheme solarized

" ================ Mapleader comma! ========================
let mapleader   = ","
let g:mapleader = ","

" ================ My Cool shortcuts ========================
" <F1> = Disable help
nnoremap <F1> <nop>

" <F2> = Toggle line numbers
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>

" <F3> = Toggle NERDTree
nnoremap <F3> :NERDTreeToggle<CR>

" <F4> = Empty

" <F5> = Empty

" <F6> = change directory to current file's pwd
nnoremap <F6> :cd %:p:h<CR>:pwd<CR>

" <F7> = Toggle paste mode
set pastetoggle=<F7>

" // = clears search highlight
nnoremap <silent> // :noh<CR>

" K = Disable man key
nnoremap K <nop>

" jk smash = esc! Seriously, esc on the homerow
inoremap jk <Esc>
inoremap kj <Esc>

" Y = copy from current character to end of line
" (mimic y0's behavior but backwards)
noremap Y y$

" Ctrl+S = save
nmap <C-s> :write!<CR>
imap <C-s> <C-o>:write!<CR>

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)

" <Leader>a = Tab by following character
nnoremap <Leader>a= :Tabularize /=<CR>
vnoremap <Leader>a= :Tabularize /=<CR>
nnoremap <Leader>a: :Tabularize /:\zs<CR>
vnoremap <Leader>a: :Tabularize /:\zs<CR>
nnoremap <Leader>a. :Tabularize /=><CR>
vnoremap <Leader>a. :Tabularize /=><CR>
vnoremap <Leader>ad :Tabularize /\d<CR>
nnoremap <Leader>ad :Tabularize /\d<CR>
vnoremap <Leader>as :Tabularize /^\s*\S\+\s\s\+\zs<CR>
nnoremap <Leader>as :Tabularize /^\s*\S\+\s\s\+\zs<CR>

" <Leader>c = comment out
vnoremap <Leader>c :TComment<CR>
nnoremap <Leader>c :TComment<CR>

" Use ,d (or ,dd or ,dj or 20,dd) to delete a line without adding it to the
" yanked stack (also, in visual mode)
nnoremap <silent> <leader>D "_d
xnoremap <silent> <leader>D "_d

" <Leader>d = Dash Search for current word
nmap <silent> <leader>d <Plug>DashSearch

" <Leader>e = open vimrc in a split for quick editing
nnoremap <leader>e :split $MYVIMRC<cr>

" <Leader>f = toggle all folding
noremap <Leader>f zi

" <Leader>h = Highlight changed lines using Git Gutter
noremap <Leader>h :GitGutterLineHighlightsToggle<CR>

" <Leader>n = Toggle NERDTree
noremap <Leader>n :NERDTreeToggle<CR>

" <Leader>o = Start 0bsessing
noremap <Leader>o :Obsess<CR>

" <Leader>p = paste at end of line
inoremap <Leader>p :normal $p
nnoremap <Leader>p $p

" <Leader>P = paste at end of line
inoremap <Leader>P :pu<CR>
nnoremap <Leader>P :pu<CR>

" <Leader>q = Auto rewrap
vnoremap <Leader>q gq
nnoremap <Leader>q gqap

" <Leader>r = Reload vim config
noremap <Leader>r :so $MYVIMRC<CR>

" <Leader>s = Search under word in my current search obsession
noremap <Leader>s :Ack <C-r><C-w><CR>
"nnoremap <Leader>s :CSearch <C-r><C-w><CR>

" <Leader>w = Strip all whitespace (from yadr-whitespace-killer.vim)
nnoremap <Leader>w :StripTrailingWhitespaces<CR>

" <Leader>z = Pop a new tab with a copy of buffer (to emulate zoom)
nnoremap <Leader>z :tabnew %<CR>

" :w!! = write a file as sudo
cmap w!! w !sudo tee % >/dev/null

" :Q = quit all fast
command! -nargs=0 Quit :qa!

" ================ Lines and cursors  ========================
set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set gcr=a:blinkon0              "Disable cursor blink
" Display tabs and trailing spaces visually
set list listchars=tab:→\ ,trail:∙,nbsp:+

" ================ Search Settings  =================
set incsearch        "Find the next match as we type the search
set viminfo='100,f1  "Save up to 100 marks, enable capital marks

" ================ Numbers =================
set nrformats=

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowritebackup

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
let backupdir = expand('~/.vim/backups')
if !isdirectory(backupdir)
  call mkdir(backupdir)
endif
set undodir=~/.vim/backups
set undofile

" ================ Indentation ======================
set autoindent
set smartindent
set smarttab

"I'm a spaces guy
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

set nowrap
set linebreak " Wrap lines at convenient points

" ================ Folds ============================
set nofoldenable        "fold by default
set foldmethod=indent
let g:vim_markdown_folding_disabled=1

" ================ Completion =======================
set wildmode=list:longest,full
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================ Scrolling ========================
set scrolloff     =8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff =15
set sidescroll    =1
" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" ================ airline ==========================
let g:airline_powerline_fonts = 1
let g:airline_theme='badwolf'

" ================ GitGutter ========================
" Solarized needs this black
highlight SignColumn ctermbg = 0
let g:gitgutter_realtime = 0
let g:gitgutter_eager    = 0

" ================ Syntastic ========================
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_enable_signs=1
let g:syntastic_aggregate_errors = 1
let g:syntastic_ignore_files=['\m^/opt/chefdk/']

" ================ NERDTree ========================
let NERDTreeMinimalUI           = 1
let NERDTreeShowHidden          = 1
let NERDTreeDirArrows           = 1
let g:NERDTreeWinSize           = 30
let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore              = ['tmp', '.yardoc', 'pkg', '\.pyc$']
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" ================ Powerline ========================
set laststatus=2

" ======================== delimitMate ========================
let delimitMate_expand_space = 1
let delimitMate_expand_cr    = 2

" ======================== Dash =============================
let g:dash_map = { 'ruby.chef' : 'chef' }

" ======================== Clipboard ========================
if !has('nvim')
  set clipboard=unnamed
else
  set clipboard+=unnamedplus
endif

" ================= Strip trailing whitespace
" via: http://rails-bestpractices.com/posts/60-remove-trailing-whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

command! StripTrailingWhitespaces call <SID>StripTrailingWhitespaces()

" =================== Super wrapping power
" http://vimcasts.org/episodes/soft-wrapping-text/
function! SetupWrapping()
  set wrap linebreak nolist
  set showbreak=…
endfunction

command! -nargs=* Wrap :call SetupWrapping()

" =======bugfix in nvim
if has('nvim')
  nmap <bs> :<c-u>TmuxNavigateLeft<cr>
  tnoremap jk <C-\><C-n>
  tnoremap kj <C-\><C-n>
endif

if has('nvim')
  let g:deoplete#enable_at_startup = 1
endif

" ================ Sourcing plugin specific setting ========================
if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif

if has("gui_vimr")
  source ~/.gvimrc
endif
