if &compatible
  set nocompatible
endif
if &shell =~# 'fish$'   "This is a compatibility fix for fish-shell and plugins
  set shell=sh
endif

" ================ Vundle for packages ========================
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" General plugins
Plug 'vim-airline/vim-airline'        " I like being on the airline
Plug 'vim-airline/vim-airline-themes' " my theme is here

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }         " NEEEEEEEERD Tree
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' } " git in my NERDTree

Plug 'christoomey/vim-tmux-navigator' " Seamless vim & tmux nav with C-hjkl
Plug 'tpope/vim-surround'             " cs\" and cs' for surrounding
Plug 'tpope/vim-obsession'            " obsessivly save sessions
Plug 'godlygeek/tabular'              " Text Alignment plugin
Plug 'junegunn/vim-easy-align'        " Text Alignment plugin
Plug 'tomtom/tcomment_vim'            " Auto block commenting

"  Autocomplete?
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'nsf/gocode', { 'rtp': 'nvim', 'do': '~/.config/nvim/plugged/gocode/nvim/symlink.sh'  } "req for deoplete-go
  Plug 'zchee/deoplete-go', { 'do': 'make'} " Go Completion
  Plug 'Shougo/neco-vim' " vim-script comletion
  Plug 'Shougo/neoinclude.vim'
  Plug 'Shougo/neco-syntax'
endif

" Programming tools
Plug 'tpope/vim-fugitive'     " How you use git as a vim user
Plug 'airblade/vim-gitgutter' " Shows edits from git in gutter
Plug 'scrooloose/syntastic'   " Global Syntax test
Plug 'blueyed/delimitMate'    " Autoadding closing braces
Plug 'janko-m/vim-test'       " TDD better
Plug 'benmills/vimux'
Plug 'majutsushi/tagbar'      " Tagbar to visualze your program

" Searching
Plug 'mileszs/ack.vim' " Experimenting with ag, the silver searcher
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Language stuff
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' } " Markdown
Plug 'itspriddle/vim-marked', { 'for': 'markdown' }   " Opens Marked 2 on current file
Plug 'tmux-plugins/vim-tmux'
Plug 'dougireton/vim-chef'     " Sets filetypes with chef and sets path to make `gf` work with recipes
Plug 'dag/vim-fish'            " Fish is my shell
Plug 'fatih/vim-go'

" My special plugins
Plug 'onlyhavecans/mm.vim'

" Color Scheme
Plug 'altercation/vim-colors-solarized'
Plug 'baskerville/bubblegum'

call plug#end()

" ================ File types ================================
set encoding=utf-8
set fileencoding=utf-8
filetype plugin indent on
syntax enable

" ================ Color =====================================
set background=dark
colorscheme solarized

" ================ Mapleader comma! ========================
let mapleader   = ","
let g:mapleader = ","

" ================ My Cool shortcuts ========================
" <F1> = Disable help
nnoremap <F1> <nop>

" <F2> = Toggle line numbers
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>

" <F3> = Toggle NERDTree
nnoremap <F3> :NERDTreeToggle<CR>

" <F4> = Toggle Solarized colorscheme
call togglebg#map("<F4>")

" <F5> = Empty

" <F6> = change directory to current file's pwd
nnoremap <F6> :cd %:p:h<CR>:pwd<CR>

" <F7> = Toggle paste mode
set pastetoggle=<F7>

" <F8> = TagBar Toggle
nmap <F8> :TagbarToggle<CR>

" // = clears search highlight
nnoremap <silent> // :noh<CR>

nnoremap XX :qall!<CR>

" K = Disable man key
nnoremap K <nop>

" jk smash = esc! Seriously, esc on the homerow
inoremap jk <Esc>
inoremap kj <Esc>

" Y = copy from current character to end of line
" (mimic y0's behavior but backwards)
noremap Y y$

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)

" <Leader>a = Tab by following character
nnoremap <Leader>a= :Tabularize /=<CR>
vnoremap <Leader>a= :Tabularize /=<CR>
nnoremap <Leader>a: :Tabularize /:\zs<CR>
vnoremap <Leader>a: :Tabularize /:\zs<CR>
nnoremap <Leader>a. :Tabularize /=><CR>
vnoremap <Leader>a. :Tabularize /=><CR>
vnoremap <Leader>ad :Tabularize /\d<CR>
nnoremap <Leader>ad :Tabularize /\d<CR>
vnoremap <Leader>as :Tabularize /^\s*\S\+\s\s\+\zs<CR>
nnoremap <Leader>as :Tabularize /^\s*\S\+\s\s\+\zs<CR>

" <Leader>b = blagfix (strip curlies)
nnoremap <Leader>b :StraightenQuotes<CR>

" <Leader>c = comment out
vnoremap <Leader>c :TComment<CR>
nnoremap <Leader>c :TComment<CR>

" <Leader>d (or ,dd or ,dj or 20,dd) to delete a line without adding it to the
" yanked stack (also, in visual mode)
nnoremap <silent> <leader>d "_d
xnoremap <silent> <leader>d "_d

" <Leader>D = Dash Search for current word
nmap <silent> <leader>D <Plug>DashSearch

" <Leader>e = open vimrc in a split for quick editing
nnoremap <leader>e :split $MYVIMRC<cr>

" <Leader>f = toggle all folding
noremap <Leader>f zi

" <Leader>h = Highlight changed lines using Git Gutter
noremap <Leader>h :GitGutterLineHighlightsToggle<CR>

" <Leader>o = Start 0bsessing
noremap <Leader>o :Obsess<CR>

" <Leader>p = paste at end of line
inoremap <Leader>p :normal $p
nnoremap <Leader>p $p

" <Leader>P = paste in next line
inoremap <Leader>P :normal pu<CR>
nnoremap <Leader>P :pu<CR>

" <Leader>T = test
nmap <silent> <leader>t :TestFile<CR>

" <Leader>q = Auto rewrap
vnoremap <Leader>q gq
nnoremap <Leader>q gqap

" <Leader>r = Reload vim config
noremap <Leader>r :so $MYVIMRC<CR>

" <Leader>s = Search under word in my current search obsession
noremap <Leader>s :Ack <C-r><C-w><CR>

" <Leader>w = Strip all whitespace (from yadr-whitespace-killer.vim)
nnoremap <Leader>w :StripTrailingWhitespaces<CR>

" <Leader>z = quick write/save
nnoremap <Leader>z :write<CR>

" :w!! = write a file as sudo
cmap w!! w !sudo tee % >/dev/null

" :Q = quit all fast
command! -nargs=0 Quit :qall!

" ================ Lines and cursors  ========================
set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
" Display tabs and trailing spaces visually
set list listchars=tab:→\ ,trail:∙,nbsp:+

" ================ Search Settings  =================
set incsearch        "Find the next match as we type the search

" ================ Numbers =================
set nrformats=

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowritebackup

" ======================== Clipboard ========================
if has('nvim')
  set clipboard+=unnamedplus
endif

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
let backupdir = expand('~/.vim/backups')
if !isdirectory(backupdir)
  call mkdir(backupdir)
endif
set undodir=~/.vim/backups
set undofile

" ================ Indentation ======================
set autoindent
set smartindent
set smarttab

"I'm a spaces guy
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

set nowrap
set linebreak " Wrap lines at convenient points

" ================ Folds ============================
set nofoldenable        "fold by default
set foldmethod=indent
let g:vim_markdown_folding_disabled=1

" ================ Completion =======================
set wildmode=list:longest,full
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================ Scrolling ========================
set scrolloff     =8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff =15
set sidescroll    =1
" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" ================ airline ==========================
let g:airline_powerline_fonts = 1
let g:airline_theme='badwolf'

" ================ GitGutter ========================
" Solarized needs this black
highlight SignColumn ctermbg = 0
let g:gitgutter_realtime = 0
let g:gitgutter_eager    = 0

" ================ Syntastic ========================
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_enable_signs=1
let g:syntastic_aggregate_errors = 1
let g:syntastic_ignore_files=['\m^/opt/chefdk/']

" ================ NERDTree ========================
let NERDTreeMinimalUI           = 1
let NERDTreeShowHidden          = 1
let NERDTreeDirArrows           = 1
let g:NERDTreeWinSize           = 30
let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore              = ['tmp', '.yardoc', 'pkg', '\.pyc$']
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" ================ Powerline ========================
set laststatus=2

" ======================== delimitMate ========================
let delimitMate_expand_space = 1
let delimitMate_expand_cr    = 2

" ======================== Dash =============================
let g:dash_map = { 'ruby.chef' : 'chef' }

" ======================== vim-test =============================
"  make test commands execute using dispatch.vim
let test#strategy = "vimux"

" ================== tagbar =============================
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" ================= Srtraighten Quotes
function! <SID>StraightenQuotes()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/[”“„]/"/g
    %s/[`’‘]/'/g
    %s/[…]/.../g
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

command! StraightenQuotes call <SID>StraightenQuotes()

" ================= Strip trailing whitespace
" via: http://rails-bestpractices.com/posts/60-remove-trailing-whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

command! StripTrailingWhitespaces call <SID>StripTrailingWhitespaces()

" =================== Super wrapping power
" http://vimcasts.org/episodes/soft-wrapping-text/
function! SetupWrapping()
  set wrap linebreak nolist
  set showbreak=…
endfunction

command! -nargs=* Wrap :call SetupWrapping()

" ========== Alias Txt to seach all txt files, don't open first
command! -nargs=* Txt :Ack! -t <f-args>

" =======bugfix in nvim
if has('nvim')
  nmap <bs> :<c-u>TmuxNavigateLeft<cr>
  tnoremap jk <C-\><C-n>
  tnoremap kj <C-\><C-n>
endif

if has('nvim')
  let g:deoplete#enable_at_startup = 1
endif

" ================ Sourcing plugin specific setting ========================
if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif

if has("gui_vimr")
  set termguicolors
  source ~/.gvimrc
endif
