set nocompatible
if &shell =~# 'fish$'   "This is a compatibility fix for fish-shell and plugins
    set shell=sh
endif

" ================ Vundle for packages ========================
filetype off
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" General plugins
Plugin 'gmarik/Vundle.vim'              " Package Manager
Plugin 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'scrooloose/nerdtree'            " NEEEEEEEERD Tree
Plugin 'tpope/vim-obsession'            " Session and window saving
Plugin 'godlygeek/tabular'              " Text Alignment plugin
Plugin 'junegunn/vim-easy-align'        " Text Alignment plugin
Plugin 'tomtom/tcomment_vim'            " Auto block commenting
Plugin 'christoomey/vim-tmux-navigator' " Seamless vim & tmux nav with C-hjkl
Plugin 'terryma/vim-multiple-cursors'   " Stole from Collin

" Programming tools
Plugin 'tpope/vim-fugitive'             " How you use git as a vim user
Plugin 'airblade/vim-gitgutter'         " Shows edits from git in gutter
Plugin 'rizzatti/dash.vim'              " Dash is amazing for lookups
Plugin 'scrooloose/syntastic'           " Global Syntax test
Plugin 'itspriddle/vim-marked'          " Opens Marked 2 on current file
Plugin 'blueyed/delimitMate'           " Autoadding closing braces
Plugin 'SirVer/ultisnips'               " Switching to vim snips
Plugin 'honza/vim-snippets'             " Default snips

" Searching
if filereadable($HOME.'/.csearchindex')
  Plugin 'Shougo/unite.vim'
  Plugin 'brandonbloom/csearch.vim'
  Plugin 'junkblocker/unite-codesearch'
endif

" Language stuff
Plugin 'plasticboy/vim-markdown'        " Markdown
Plugin 'klen/python-mode'               " Python
Plugin 'dougireton/vim-chef'            " Sets filetypes with chef and sets path to make `gf` work with recipes
Plugin 'dag/vim-fish'                   " Fish is my shell

" Testing

" My special plugins
Plugin 'ssh://git@stash.bunni.biz:7999/cfg/muck.git'

" Color Scheme
Plugin 'altercation/vim-colors-solarized'

call vundle#end()

" ================ Mapleader comma! ========================

let mapleader   = ","
let g:mapleader = ","

" ================ My Cool shortcuts ========================

" <F1> = Disable help
nnoremap <F1> <nop>

" <F2> = Toggle line numbers
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>

" <F3> = Toggle NERDTree
nnoremap <F3> :NERDTreeToggle<CR>

" <F4> = Highlight the 81st column (from colorcolumn.vim)
nnoremap <F4> :ToggleColorColumn<cr>

" <F5> = Mac OS X Dropzone

" <F6> = change directory to current file's pwd
nnoremap <F6> :cd %:p:h<CR>:pwd<CR>

" <F7> = Toggle paste mode
set pastetoggle=<F7>

" // = clears search highlight
nnoremap <silent> // :noh<CR>

" K = Disable man key
nnoremap K <nop>

" jk smash = esc! Seriously, esc on the homerow
inoremap jk <Esc>
inoremap kj <Esc>

" Q = Auto rewrap
vnoremap Q gq
nnoremap Q gqap

" Y = copy from current character to end of line
" (mimic y0's behavior but backwards)
noremap Y y$

" Ctrl+S = save
nmap <C-s> :write!<CR>
imap <C-s> <C-o>:write!<CR>

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)

" <Leader>a = Tab by following character
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a. :Tabularize /=><CR>
vmap <Leader>a. :Tabularize /=><CR>
vmap <Leader>ad :Tabularize /\d<CR>
nmap <Leader>ad :Tabularize /\d<CR>
vmap <Leader>as :Tabularize /^\s*\S\+\s\s\+\zs<CR>
nmap <Leader>as :Tabularize /^\s*\S\+\s\s\+\zs<CR>

" <Leader>c = comment out
vnoremap <Leader>c :TComment<CR>
nnoremap <Leader>c :TComment<CR>

" Use ,d (or ,dd or ,dj or 20,dd) to delete a line without adding it to the
" yanked stack (also, in visual mode)
nnoremap <silent> <leader>d "_d
xnoremap <silent> <leader>d "_d

" <Leader>D = Dash Search for current word
nmap <silent> <leader>D <Plug>DashSearch

" <Leader>f = kill folding
noremap <Leader>f :set nofoldenable<CR>

" <Leader>h = Highlight changed lines using Git Gutter
noremap <Leader>h :GitGutterLineHighlightsToggle<CR>

" <Leader>n = Toggle NERDTree
noremap <Leader>n :NERDTreeToggle<CR>

" <Leader>o = Start 0bsessing
noremap <Leader>o :Obsess<CR>

" <Leader>r = Reload vim config
noremap <Leader>r :so $MYVIMRC<CR>

" <Leader>s = Search unite
nnoremap <Leader>s :Unite codesearch<CR>

" <Leader>w = Strip all whitespace (from yadr-whitespace-killer.vim)
nnoremap <Leader>w :StripTrailingWhitespaces<CR>

" <Leader>z = Pop a new tab with a copy of buffer (to emulate zoom)
nnoremap <Leader>z :tabnew %<CR>

" :w!! = write a file as sudo
cmap w!! w !sudo tee % >/dev/null

" :Q = quit all fast
command! -nargs=0 Quit :qa!

" ================ File types & Color  ========================

set encoding=utf-8
filetype on          " enables filetype detection
filetype plugin on   " enables filetype specific pugins
filetype indent on   " enables filetype detection for indenting
syntax enable
colorscheme solarized
set background=dark

" ================ Lines and cursors  ========================

set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set gcr=a:blinkon0              "Disable cursor blink
" Display tabs and trailing spaces visually
set list listchars=tab:→\ ,trail:∙

" ================ Search Settings  =================

set incsearch        "Find the next match as we type the search
set viminfo='100,f1  "Save up to 100 marks, enable capital marks

" ================ Numbers =================

set nrformats=

" ================ Turn Off Swap Files ==============

set noswapfile
set nobackup
set nowritebackup

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.

let backupdir = expand('~/.vim/backups')
if !isdirectory(backupdir)
    call mkdir(backupdir)
  endif
set undodir=~/.vim/backups
set undofile

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab

"I'm a spaces guy
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

set nowrap
set linebreak " Wrap lines at convenient points

let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size  = 1

" ================ Folds ============================

set nofoldenable        "dont fold by default
let g:vim_markdown_folding_disabled=1

" ================ Completion =======================

set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================ Scrolling ========================

set scrolloff     =8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff =15
set sidescroll    =1
" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" ================ GitGutter ========================
"
" Solarized needs this black
highlight SignColumn ctermbg =0
highlight SignColumn guibg   =0

" ================ Syntastic ========================

let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_enable_signs=1
let g:syntastic_aggregate_errors = 1
let g:syntastic_ignore_files=['\m^/opt/chefdk/']

" ================ UltiSnips ========================

let g:UltiSnipsEditSplit           = "horizontal"
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" ================ NERDTree ========================

let NERDTreeMinimalUI           = 1
let NERDTreeDirArrows           = 1
let g:NERDTreeWinSize           = 30
let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore              = ['tmp', '.yardoc', 'pkg', '\.pyc$']
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" ================ Powerline ========================

set laststatus =2

" ======================== delimitMate ========================

let delimitMate_expand_space = 1
let delimitMate_expand_cr    = 2

" ======================== UniteCodeSearch ========================
let g:unite_enable_start_insert        = 1
let g:unite_split_rule                 = "botright"
let g:unite_force_overwrite_statusline = 0
let g:unite_winheight                  = 30

" ================ Sourcing plugin specific setting ========================

for f in split(glob('~/.vim/settings/*.vim'), '\n')
  exe 'source' f
endfor

if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif
