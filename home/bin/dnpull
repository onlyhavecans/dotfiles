#!/usr/bin/env bash

errors=()

function header_status_message() {
  GREEN='\033[0;32m'
  NOCOLOR='\033[0m'
  echo -e "${GREEN}~ $*${NOCOLOR}"
}

function status_message() {
  echo -e "~~ $*"
}

function error_message() {
  RED='\033[0;31m'
  NOCOLOR='\033[0m'
  echo -e "${RED}! $*${NOCOLOR}"
}

if ! command -v fd &> /dev/null; then
  error_message "You need fd command"
  exit 2
fi

for dir in $(fd --hidden --no-ignore --fixed-strings .git --type d --exclude .direnv --exclude gocode --exclude .github); do
  LOCAL_DIR=$(realpath "$dir/..")

  header_status_message "Updating $LOCAL_DIR"

  if (( $(git -C "$LOCAL_DIR" remote | wc -l) == 0 )); then
    errors+=("! $LOCAL_DIR does not have a remote so skipping.")
    continue
  fi

  if ! git -C "$LOCAL_DIR" fetch --prune --prune-tags --quiet --force &>/dev/null; then
    errors+=("! $LOCAL_DIR Unable to fetch remote.")
    continue
  fi

  # Deal with different default branch names
  DEFAULT_BRANCH=main
  if git -C "$LOCAL_DIR" show-ref --verify --quiet "refs/heads/master"; then
    ## If master is renamed upstream rename us here
    if git -C "$LOCAL_DIR" show-ref --verify --quiet "refs/remotes/origin/main"; then
      status_message "Swapping default branch to main"
      git -C "$LOCAL_DIR" branch -m master main
      git -C "$LOCAL_DIR" fetch origin
      git -C "$LOCAL_DIR" branch -u origin/main main
    else
      DEFAULT_BRANCH=master
    fi
  fi

  if ! git -C "$LOCAL_DIR" diff-index --quiet HEAD --; then
    status_message "Found changes in working directory, stashing"
    git -C "$LOCAL_DIR" stash
  fi

  status_message "git checkout"
  if ! git -C "$LOCAL_DIR" checkout $DEFAULT_BRANCH &>/dev/null; then
    errors+=("! $LOCAL_DIR Could not check out $DEFAULT_BRANCH.")
    continue
  fi

  status_message "git pull"
  if ! git -C "$LOCAL_DIR" pull; then
    errors+=("! $LOCAL_DIR Could not pull $DEFAULT_BRANCH.")
  fi

  ## Do some repo cleanup since we got this far
  # looking for
  # error: refs/remotes/origin/HEAD: invalid sha1 pointer 0000000000000000000000000000000000000000
  status_message "Running FSCK"
  if ! git -C "$LOCAL_DIR" fsck --full --no-progress; then
    git -C "$LOCAL_DIR" remote set-head origin --auto
  fi

  status_message "Running Garbage Collection"
  git -C "$LOCAL_DIR" gc --aggressive --prune=now
done

echo ""
echo ""
error_message "The following repos had errors, please check"
for i in "${errors[@]}"; do
  echo "$i"
done
