#!/bin/bash
## Using system /bin/bash is intentional. The script crashes when brew upgrades bash

##
# Helpers
##
function status_message {
  GREEN='\033[0;32m'
  NOCOLOR='\033[0m'
  echo ""
  echo -e "${GREEN}~ $*${NOCOLOR}"
}

function error_message {
  RED='\033[0;31m'
  NOCOLOR='\033[0m'
  echo -e "${RED}! $*${NOCOLOR}"
}

function command_exists {
  if command -v "$1" &>/dev/null; then
    return 0
  fi
  error_message "command [${1}] does not exist in path"
  return 127
}

function path_exists {
  if [[ -f "$1" ]]; then
    return 0
  fi
  error_message "path [${1}] for app [${2}] does not exist"
  return 127
}

##
# Dotfiles!
##

if path_exists "${HOME}/.homesick/repos/homeshick/homeshick.sh" homeshick; then
  status_message "[homeshick] Update castles"
  # Needed for commands to work
  # shellcheck source=/dev/null
  source "${HOME}/.homesick/repos/homeshick/homeshick.sh"
  homeshick pull
  homeshick link
  status_message "[homeshick] Checking for local changes"
  homeshick check
fi

##
# The package manager upgrades
##

if command_exists apt-get; then
  status_message "[apt] Update packages"
  if command_exists nala; then
    sudo nala upgrade
  else
    sudo apt update
    sudo apt upgrade
  fi
fi

if command_exists pacman; then
  status_message "[pacman] Update packages"
  sudo pacman -Syu
fi

if command_exists flatpak; then
  status_message "[flatpak] Update packages"
  flatpak update --assumeyes
fi

if command_exists brew; then
  status_message "[homebrew] Update packages"
  brew update
  brew upgrade

  status_message "[homebrew] Ensure base install set"
  brew bundle install --file=~/.config/Brewfile

  status_message "[homebrew] Link completions"
  brew completions link # https://docs.brew.sh/Shell-Completion

  status_message "[homebrew] Check for missing packages"
  brew missing
fi

##
# App & plugin updates
##

if command_exists tldr; then
  status_message "[tldr] Updating tldr library"
  tldr --update
fi

if command_exists yazi; then
  status_message "[yazi] Updating yazi plugins"
  ya pkg upgrade
fi

if command_exists asdf; then
  status_message "[asdf] Update asdf plugins"
  asdf plugin update --all

  status_message "[asdf] Listing installed versions"
  asdf reshim
  asdf list

  status_message "[asdf] Listing latest versions"
  for plugin in $(asdf plugin list); do
    echo -n "$plugin: "
    asdf latest "$plugin"
  done
fi

if path_exists "${HOME}/.cargo/bin/rustup" rust; then
  status_message "[rustup] Update rust"
  "${HOME}/.cargo/bin/rustup" update
fi

if path_exists "${HOME}/.config/tmux/plugins/tpm/bin/update_plugins" tpm; then
  status_message "[tmux] Update and clean plugins"
  ~/.config/tmux/plugins/tpm/bin/install_plugins
  ~/.config/tmux/plugins/tpm/bin/update_plugins all
  ~/.config/tmux/plugins/tpm/bin/clean_plugins
fi
